{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "Links and nodes",
  "padding": 0,
  "autosize": "none",
  "signals": [
    {
      "name": "node_click",
      "on": [{ "events": "@nodes:click", "update": "datum" }]
    },
    {
      "name": "edge_click",
      "on": [{ "events": "@edges:click", "update": "datum" }]
    },
    { "name": "cx", "update": "width / 2" },
    { "name": "cy", "update": "height / 2" },
    {
      "name": "nodeCharge",
      "value": -3,
      "bind": { "input": "range", "min": -100, "max": 100, "step": 1 }
    },
    {
      "name": "linkDistance",
      "value": 0.7,
      "bind": { "input": "range", "min": 0.1, "max": 1, "step": 0.01 }
    },
    {
      "name": "vis_height",
      "value": 500,
      "bind": { "input": "range", "min": 400, "max": 2000, "step": 50 }
    },
    {
      "name": "vis_width",
      "value": 894,
      "bind": { "input": "range", "min": 400, "max": 2000, "step": 50 }
    },
    {
      "description": "State variable for active node fix status.",
      "name": "fix",
      "value": false,
      "on": [
        {
          "events": "symbol:mouseout[!event.buttons], window:mouseup",
          "update": "false"
        },
        { "events": "symbol:mouseover", "update": "fix || true" },
        {
          "events": "[symbol:mousedown, window:mouseup] > window:mousemove!",
          "update": "xy()",
          "force": true
        }
      ]
    },
    {
      "description": "Graph node most recently interacted with.",
      "name": "node",
      "value": null,
      "on": [
        {
          "events": "symbol:mouseover",
          "update": "fix === true ? item() : node"
        }
      ]
    },
    {
      "description": "Flag to restart Force simulation upon data changes.",
      "name": "restart",
      "value": false,
      "on": [{ "events": { "signal": "fix" }, "update": "fix && fix.length" }]
    }
  ],
  "width": { "signal": "vis_width" },
  "height": { "signal": "vis_height" },
  "data": [
    { "name": "node-data", "values": null },
    { "name": "link-data", "values": null }
  ],
  "scales": [
    {
      "name": "color",
      "type": "ordinal",
      "domain": { "data": "node-data", "field": "cluster_id" },
      "range": { "scheme": "category20c" }
    },
    {
      "name": "link_color",
      "type": "linear",
      "domain": { "data": "link-data", "field": "edge_betweenness" },
      "range": { "scheme": "redyellowgreen" },
      "reverse": true
    },
    {
      "name": "nodeRadius",
      "type": "linear",
      "nice": false,
      "reverse": false,
      "zero": true,
      "domain": { "data": "node-data", "field": "eigen_centrality" },
      "range": [10, 1500]
    },
    {
      "name": "edge_length_scale",
      "type": "linear",
      "nice": false,
      "domain": { "data": "link-data", "field": "edge_betweenness" },
      "range": [100, 400]
    }
  ],
  "legends": [],
  "marks": [
    {
      "name": "nodes",
      "type": "symbol",
      "zindex": 1,
      "from": { "data": "node-data" },
      "on": [
        {
          "trigger": "fix",
          "modify": "node",
          "values": "fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}"
        },
        {
          "trigger": "!fix",
          "modify": "node",
          "values": "{fx: null, fy: null}"
        }
      ],
      "encode": {
        "enter": {
          "size": { "field": "eigen_centrality", "scale": "nodeRadius" },
          "fill": { "scale": "color", "field": "cluster_id" },
          "stroke": { "value": "white" },
          "tooltip": { "signal": "datum.tooltip" }
        },
        "update": { "cursor": { "value": "pointer" } }
      },
      "transform": [
        {
          "type": "force",
          "iterations": 300,
          "restart": { "signal": "restart" },
          "static": false,
          "signal": "force",
          "forces": [
            {
              "force": "center",
              "x": { "signal": "cx" },
              "y": { "signal": "cy" }
            },
            {
              "force": "collide",
              "radius": {
                "expr": "sqrt(scale('nodeRadius',datum.datum.eigen_centrality))/1.8"
              }
            },
            { "force": "nbody", "strength": { "signal": "nodeCharge" } },
            {
              "force": "link",
              "id": "datum.node_id",
              "links": "link-data",
              "distance": {
                "expr": "scale('edge_length_scale',datum.edge_betweenness)*linkDistance"
              }
            }
          ]
        }
      ]
    },
    {
      "type": "path",
      "name": "edges",
      "from": { "data": "link-data" },
      "interactive": true,
      "encode": {
        "update": {
          "stroke": { "scale": "link_color", "field": "edge_betweenness" },
          "tooltip": { "signal": "datum.tooltip" },
          "strokeWidth": { "value": 2 }
        }
      },
      "transform": [
        {
          "type": "linkpath",
          "require": { "signal": "force" },
          "shape": "line",
          "sourceX": "datum.source.x",
          "sourceY": "datum.source.y",
          "targetX": "datum.target.x",
          "targetY": "datum.target.y"
        }
      ]
    },
    {
      "type": "text",
      "from": { "data": "nodes" },
      "interactive": false,
      "zindex": 2,
      "encode": {
        "enter": {
          "align": { "value": "center" },
          "baseline": { "value": "middle" },
          "fontSize": { "value": 12 },
          "fontWeight": { "value": "bold" },
          "text": { "field": "datum.node_id" }
        },
        "update": { "x": { "field": "x" }, "y": { "field": "y" } }
      }
    }
  ]
}
