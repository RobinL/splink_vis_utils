function _1(md){return(
md`# splink_comparison_viewer`
)}

function _show_edge_comparison_type(splink_vis_utils){return(
splink_vis_utils.checkbox(
  new Map([
    ["Show simple comparison table", "show_simple_comparison_table"],
    [
      "Show case statement comparison table",
      "show_case_statement_comparison_table"
    ]
  ]),
  {
    label: "",
    value: ["show_simple_comparison_table"]
  }
)
)}

function _sort_bars_option(splink_vis_utils)
{
  let select_options = new Map([
    ["Sort historam by match weight", "sort_match_weight"],
    ["Sort histogram by sum of matches in bar", "sort_sum_matches"]
  ]);
  return splink_vis_utils.select(select_options, {
    label: "Sort histogram bars by: ",
    value: "sort_match_weight"
  });
}


function _gamma_filters(get_gammas_filters,ss){return(
get_gammas_filters(ss)
)}

function _filter_count(splink_vis_utils){return(
splink_vis_utils.range([1, 1000], {
  label: "Filter out comparison vector counts below",
  step: 1,
  value: 1
})
)}

function _comparison_vector_distribution_chart(vegaEmbed,chart_spec_with_data){return(
vegaEmbed(chart_spec_with_data)
)}

function _nothing_selected_message(no_edge_selected,html)
{
  if (no_edge_selected) {
    return html`<span style="color:red; font-weight:bold; background-color: #FFFF00"'>Click on a bar in the comparison vector chart above to show an example record comparison`;
  }

  return html``;
}


function _example_index(no_edge_selected,comparison_vector_row_lookup,cv_chart_selection,splink_vis_utils)
{
  if (!no_edge_selected) {
    let num_options =
      comparison_vector_row_lookup[cv_chart_selection["gam_concat"]].length;

    let select_options = [...Array(num_options).keys()];
    return splink_vis_utils.select(select_options, {
      label: "Choose example record",
      value: 0
    });
  } else {
    let hidden = splink_vis_utils.select([1], {
      label: "Choose example record",
      value: 0
    });

    hidden.style.visibility = "hidden";
    return hidden;
  }
}


function _compairson_non_null_table(no_edge_selected,html,show_edge_comparison_type,splink_vis_utils,selected_edge,ss)
{
  if (no_edge_selected) {
    return html``;
  }

  if (show_edge_comparison_type.includes("show_simple_comparison_table")) {
    return html`  <h3>Comparison of non-null fields</h3>   
    ${splink_vis_utils.edge_row_to_table(selected_edge, ss)}
`;
  }

  return html``;
}


function _comparison_columns_table(no_edge_selected,html,show_edge_comparison_type,splink_vis_utils,selected_edge,ss)
{
  if (no_edge_selected) {
    return html``;
  }
  if (
    show_edge_comparison_type.includes("show_case_statement_comparison_table")
  ) {
    return html`
  <h3>Record comparison and associated case expression</h3>   
${splink_vis_utils.comparison_column_table(selected_edge, ss)}`;
  }

  return html``;
}


function _waterfall_chart(no_edge_selected,html,splink_vis_utils,selected_edge,ss,vegaEmbed)
{
  if (no_edge_selected) {
    return html``;
  } else {
    let waterfall_data = splink_vis_utils.get_waterfall_chart_data(
      selected_edge,
      ss
    );

    return vegaEmbed(
      splink_vis_utils.get_waterfall_chart_spec(waterfall_data, { height: 250 })
    );
  }
}


function _refresh(Inputs){return(
Inputs.button("refresh splink_vis_utils javascript lib")
)}

function _get_gammas_filters(html,splink_vis_utils){return(
function get_gammas_filters(splink_settings_object) {
  let ss_cols = splink_settings_object.comparisons;

  const form = html`<form>
    ${ss_cols.map((cc) => {
      let num_levels = cc.num_levels;
      let select_values = [...Array(num_levels).keys()];
      select_values.unshift(-1);
      select_values.unshift("Any");

      return html`<div id='id_${cc.name}'>${splink_vis_utils.select(
        select_values,
        {
          label: `Filter ${cc.name}`
        }
      )}</div>`;
    })}

</form>`;

  form.oninput = function () {
    let mydict = {};
    ss_cols.forEach((cc) => {
      mydict[cc.name] = form.querySelector(`#id_${cc.name} form`).value;
    });
    form.value = mydict;
  };
  form.oninput();
  return form;
}
)}

function _14(md){return(
md`## Interations`
)}

function _cv_chart_selection(observe_chart_data,comparison_vector_distribution_chart){return(
observe_chart_data(
  comparison_vector_distribution_chart,
  "gam_concat_signal"
)
)}

function _selected_edge(no_edge_selected,comparison_vector_row_lookup,cv_chart_selection,example_index)
{
  if (!no_edge_selected) {
    return comparison_vector_row_lookup[cv_chart_selection["gam_concat"][0]][
      example_index
    ];
  } else {
    return undefined;
  }
}


function _no_edge_selected(cv_chart_selection){return(
!("gam_concat" in cv_chart_selection)
)}

function _18(md){return(
md`## Other`
)}

function _new_width(width)
{
  if (width - 200 > 1200) {
    return 1000;
  }
  return width - 200;
}


function _ss(splink_vis_utils,splink_settings){return(
new splink_vis_utils.SplinkSettings(JSON.stringify(splink_settings))
)}

function _filtered_comparison_vector_data(gamma_filters,comparison_vector_data,filter_count)
{
  let gam_keys = Object.keys(gamma_filters);

  let cvd_filtered = comparison_vector_data;

  cvd_filtered = cvd_filtered.filter((d) => d.row_example_index == 1);

  gam_keys.forEach((gk) => {
    cvd_filtered = cvd_filtered.filter((d) => {
      let this_filter = gamma_filters[gk];
      if (this_filter == "Any") {
        return true;
      }

      return d[`gamma_${gk}`] == this_filter;
    });
  });

  cvd_filtered = cvd_filtered.filter(
    (d) => d.count_rows_in_comparison_vector_group >= filter_count
  );

  return cvd_filtered;
}


function _22(md){return(
md`## Functions`
)}

function _create_comparison_vector_row_lookup(){return(
function create_comparison_vector_row_lookup(sample_edges) {
  let lookup = {};
  sample_edges.forEach(d => {
    let gc = d["gam_concat"];
    lookup[gc] = lookup[gc] || [];

    lookup[gc].push(d);
  });
  return lookup;
}
)}

function _comparison_vector_row_lookup(create_comparison_vector_row_lookup,comparison_vector_data){return(
create_comparison_vector_row_lookup(
  comparison_vector_data
)
)}

function _observe_chart_data(Generators){return(
function observe_chart_data(chart, signal_name) {
  return Generators.observe(function(notify) {
    const signaled = (name, value) => notify(chart.signal(signal_name));
    chart.addSignalListener(signal_name, signaled);
    notify(chart.signal(signal_name));

    return () => chart.removeSignalListener(signal_name, signaled);
  });
}
)}

function _26(md){return(
md`## External libs`
)}

function _chart_spec_with_data(splink_vis_utils,filtered_comparison_vector_data,ss,new_width,sort_bars_option)
{
  let cs_with_data = splink_vis_utils.get_gamma_distribution_chart(
    filtered_comparison_vector_data,
    ss,
    new_width,
    sort_bars_option
  );

  return cs_with_data;
}


function _28(md){return(
md`## Data`
)}

export default function define(runtime, observer) {
  const main = runtime.module();
  main.variable(observer()).define(["md"], _1);
  main.variable(observer("viewof show_edge_comparison_type")).define("viewof show_edge_comparison_type", ["splink_vis_utils"], _show_edge_comparison_type);
  main.variable(observer("show_edge_comparison_type")).define("show_edge_comparison_type", ["Generators", "viewof show_edge_comparison_type"], (G, _) => G.input(_));
  main.variable(observer("viewof sort_bars_option")).define("viewof sort_bars_option", ["splink_vis_utils"], _sort_bars_option);
  main.variable(observer("sort_bars_option")).define("sort_bars_option", ["Generators", "viewof sort_bars_option"], (G, _) => G.input(_));
  main.variable(observer("viewof gamma_filters")).define("viewof gamma_filters", ["get_gammas_filters","ss"], _gamma_filters);
  main.variable(observer("gamma_filters")).define("gamma_filters", ["Generators", "viewof gamma_filters"], (G, _) => G.input(_));
  main.variable(observer("viewof filter_count")).define("viewof filter_count", ["splink_vis_utils"], _filter_count);
  main.variable(observer("filter_count")).define("filter_count", ["Generators", "viewof filter_count"], (G, _) => G.input(_));
  main.variable(observer("viewof comparison_vector_distribution_chart")).define("viewof comparison_vector_distribution_chart", ["vegaEmbed","chart_spec_with_data"], _comparison_vector_distribution_chart);
  main.variable(observer("comparison_vector_distribution_chart")).define("comparison_vector_distribution_chart", ["Generators", "viewof comparison_vector_distribution_chart"], (G, _) => G.input(_));
  main.variable(observer("nothing_selected_message")).define("nothing_selected_message", ["no_edge_selected","html"], _nothing_selected_message);
  main.variable(observer("viewof example_index")).define("viewof example_index", ["no_edge_selected","comparison_vector_row_lookup","cv_chart_selection","splink_vis_utils"], _example_index);
  main.variable(observer("example_index")).define("example_index", ["Generators", "viewof example_index"], (G, _) => G.input(_));
  main.variable(observer("compairson_non_null_table")).define("compairson_non_null_table", ["no_edge_selected","html","show_edge_comparison_type","splink_vis_utils","selected_edge","ss"], _compairson_non_null_table);
  main.variable(observer("comparison_columns_table")).define("comparison_columns_table", ["no_edge_selected","html","show_edge_comparison_type","splink_vis_utils","selected_edge","ss"], _comparison_columns_table);
  main.variable(observer("waterfall_chart")).define("waterfall_chart", ["no_edge_selected","html","splink_vis_utils","selected_edge","ss","vegaEmbed"], _waterfall_chart);
  main.variable(observer("viewof refresh")).define("viewof refresh", ["Inputs"], _refresh);
  main.variable(observer("refresh")).define("refresh", ["Generators", "viewof refresh"], (G, _) => G.input(_));
  main.variable(observer("get_gammas_filters")).define("get_gammas_filters", ["html","splink_vis_utils"], _get_gammas_filters);
  main.variable(observer()).define(["md"], _14);
  main.variable(observer("cv_chart_selection")).define("cv_chart_selection", ["observe_chart_data","comparison_vector_distribution_chart"], _cv_chart_selection);
  main.variable(observer("selected_edge")).define("selected_edge", ["no_edge_selected","comparison_vector_row_lookup","cv_chart_selection","example_index"], _selected_edge);
  main.variable(observer("no_edge_selected")).define("no_edge_selected", ["cv_chart_selection"], _no_edge_selected);
  main.variable(observer()).define(["md"], _18);
  main.variable(observer("new_width")).define("new_width", ["width"], _new_width);
  main.variable(observer("ss")).define("ss", ["splink_vis_utils","splink_settings"], _ss);
  main.variable(observer("filtered_comparison_vector_data")).define("filtered_comparison_vector_data", ["gamma_filters","comparison_vector_data","filter_count"], _filtered_comparison_vector_data);
  main.variable(observer()).define(["md"], _22);
  main.variable(observer("create_comparison_vector_row_lookup")).define("create_comparison_vector_row_lookup", _create_comparison_vector_row_lookup);
  main.variable(observer("comparison_vector_row_lookup")).define("comparison_vector_row_lookup", ["create_comparison_vector_row_lookup","comparison_vector_data"], _comparison_vector_row_lookup);
  main.variable(observer("observe_chart_data")).define("observe_chart_data", ["Generators"], _observe_chart_data);
  main.variable(observer()).define(["md"], _26);
  main.variable(observer("chart_spec_with_data")).define("chart_spec_with_data", ["splink_vis_utils","filtered_comparison_vector_data","ss","new_width","sort_bars_option"], _chart_spec_with_data);
  main.variable(observer()).define(["md"], _28);
  return main;
}
